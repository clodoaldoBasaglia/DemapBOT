/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package robodemap;

import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URL;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;

/**
 *
 * @author Suporte
 */
public class jFrameRoboDemap extends javax.swing.JFrame {

    String caminho = "\"http://www.portaldatransparencia.gov.br";
    DefaultTableModel modelo;
    String caminhoArquivos = "";

    /**
     * Creates new form jFrameRoboDemap 376210 Cogeti -> G008
     */
    public jFrameRoboDemap() {
        initComponents();
        iniciaTabela();
        configuracoes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        jFileChooser1.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(32, 27, 175, 29));

        jButton1.setText("Adicionar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(213, 30, 98, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, -1, 367));

        jButton2.setText("Processar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(552, 104, 123, -1));

        jButton3.setText("Limpar selecionado");
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(552, 145, -1, -1));

        jButton4.setText("Limpar todos");
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(552, 186, 123, -1));

        jButton5.setText("Abrir pasta...");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(562, 215, 110, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
//        consultar();
        adicionar();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        processar();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        // TODO add your handling code here:

    }//GEN-LAST:event_jTextField1KeyTyped

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (validar()) {
                adicionar();
                limpar();
            }
        }
    }//GEN-LAST:event_jTextField1KeyPressed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        verDiretorio();
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jFrameRoboDemap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jFrameRoboDemap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jFrameRoboDemap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jFrameRoboDemap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jFrameRoboDemap().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void consultar() {
    }

    private void salvaArquivo(String texto, String corpo) throws UnsupportedEncodingException {
        File diretorio = new File(caminhoArquivos + "/" + texto);
        diretorio.mkdir();
        try (Writer writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(diretorio + "/" + texto + "-portal-transparencia.html"), "utf-8"))) {
            writer.write(corpo);
        } catch (IOException ex) {
            Logger.getLogger(jFrameRoboDemap.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String mudaCaminho(String corpo) {
        corpo = corpo.replace("\"/static", caminho + "/static");
        corpo = corpo.replace("/RecursosJS", caminho + "/RecursosJS");
        return corpo;
    }

    private boolean validar() {
        String texto = jTextField1.getText();
        return texto.length() == 11 || texto.length() == 14;
    }

    private void iniciaTabela() {
        modelo = new DefaultTableModel();
        modelo.setColumnIdentifiers(new String[]{"Entrada", "CPF", "CNPJ", "Portal da Transparencia", "TCU"});
        jTable1.setModel(modelo);
    }

    private void adicionar() {
        if (validar()) {
            modelo.addRow(new String[]{jTextField1.getText()});
            limpar();
        } else {
            JOptionPane.showMessageDialog(rootPane, "CPF/CNPJ INVÁLIDO");
        }
    }

    private void processar() {
        ArrayList<String> arrayDeValores = new ArrayList<>();
        TableModel model = jTable1.getModel();
        int rowCount = model.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            arrayDeValores.add((String) model.getValueAt(i, 0));
        }
//        processaPortalTransparencia(arrayDeValores);
        processaTribunalContas(arrayDeValores);

    }

    private void processaPortalTransparencia(ArrayList<String> arrayDeValores) {
        CloseableHttpClient httpClient = HttpClients.createDefault();
        for (String arrayDeValore : arrayDeValores) {
            HttpGet httpGet = new HttpGet("http://www.portaldatransparencia.gov.br/ceis?cpfCnpj=" + arrayDeValore + "&nome=&tipoSancao=");
            ResponseHandler<String> rh = new ResponseHandler<String>() {
                @Override
                public String handleResponse(HttpResponse hr) throws ClientProtocolException, IOException {
                    int status = hr.getStatusLine().getStatusCode();
                    if (status >= 200 && status < 300) {
                        HttpEntity entidade = hr.getEntity();
                        return entidade != null ? EntityUtils.toString(entidade) : null;
                    } else {
                        throw new ClientProtocolException("Deu ruim pq " + status);
                    }
                }
            };
            String corpo;
            try {
                corpo = httpClient.execute(httpGet, rh);
                corpo = mudaCaminho(corpo);
                salvaArquivo(arrayDeValore, corpo);
            } catch (IOException ex) {
                Logger.getLogger(jFrameRoboDemap.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try {
            httpClient.close();
        } catch (IOException ex) {
            Logger.getLogger(jFrameRoboDemap.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void limpar() {
        boolean name = jTextField1.getText() != null;
        if (name) {
            jTextField1.setText(null);
        }
    }

    private void processaTribunalContas(ArrayList<String> arrayDeValores) {
        CloseableHttpClient httpClient = HttpClients.createDefault();
        //para inabilitados
        for (String arrayDeValore : arrayDeValores) {

            try {
                URL endereco = new URL("https://contas.tcu.gov.br/ords/f?p=1819:3:8756761052784::::P3_TIPO_RELACAO:INABILITADO");
                HttpGet httpGet = new HttpGet(endereco.toString());
                ResponseHandler<String> rh = new ResponseHandler<String>() {
                    @Override
                    public String handleResponse(HttpResponse hr) throws ClientProtocolException, IOException {
                        int status = hr.getStatusLine().getStatusCode();
                        if (status >= 200 && status < 300) {
                            HttpEntity entidade = hr.getEntity();
                            return entidade != null ? EntityUtils.toString(entidade) : null;
                        } else {
                            throw new ClientProtocolException("Deu ruim pq " + status);
                        }
                    }
                };
                String corpo = httpClient.execute(httpGet, rh);
                System.out.println(corpo);
                salvaArquivo(arrayDeValore, corpo);
                try {
                    httpClient.close();
                } catch (IOException ex) {
                    Logger.getLogger(jFrameRoboDemap.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (IOException ex) {
                Logger.getLogger(jFrameRoboDemap.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void configuracoes() {
        File f = new File("configuracoes.cfg");
        if (!f.exists()) {
            JOptionPane.showMessageDialog(rootPane, "Você deve selecionar uma pasta para salvar os arquivos");
            try {
                f.createNewFile();
                try {
                    try {
                        Writer write = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(f), "utf-8"));
                        write.write(caminhoArquivos);
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(jFrameRoboDemap.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } catch (UnsupportedEncodingException ex) {
//                    Loggerl.getLogger(jFrameRoboDemap.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (IOException ex) {
                Logger.getLogger(jFrameRoboDemap.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            System.out.println("else");
            BufferedReader br = null;
            try {
                br = new BufferedReader(new FileReader("configuracoes.cfg"));
                String texto = "";
                String conteudo = "";
                try {
                    while ((texto = br.readLine()) != null) {
                        System.out.println(texto);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(jFrameRoboDemap.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(jFrameRoboDemap.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    br.close();
                } catch (IOException ex) {
                    Logger.getLogger(jFrameRoboDemap.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private void verDiretorio() {
        int retornoValor = jFileChooser1.showDialog(this, "Salvar");
        jFileChooser1.setDialogTitle("Salve seu arquivo");
        if (retornoValor == jFileChooser1.APPROVE_OPTION) {
            System.out.println(jFileChooser1.getSelectedFile().getAbsolutePath());
            caminhoArquivos = jFileChooser1.getSelectedFile().getAbsolutePath();
        }
    }
}
